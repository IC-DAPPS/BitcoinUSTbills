type AccreditedInvestorCredential = record {
  verified_date : nat64;
  credential_jws : text;
  issuer : text;
  expiry_date : nat64;
  annual_income_verified : bool;
  net_worth_verified : bool;
};
type ArgumentValue = variant { Int : int32; String : text };
type BitcoinUSTBillsError = variant {
  UserAlreadyExists;
  VCPreparationFailed : text;
  VCInvalidIdAlias : text;
  TradingNotAllowed;
  VCUnsupportedCredentialSpec : text;
  AccessDenied;
  InvalidAmount;
  TransactionCancelled;
  MinimumInvestmentNotMet;
  VCUnsupportedOrigin : text;
  HoldingNotFound;
  DatabaseError : text;
  YieldCalculationError;
  FailedToAddToList;
  VCConsentMessageUnavailable : text;
  VCVerificationFailed : text;
  TreasuryDataFetchError;
  TransactionFailed;
  MaximumInvestmentExceeded;
  VCIssuanceFailed : text;
  VCCredentialNotFound : text;
  VCUnknownSubject : text;
  VCCredentialExpired : text;
  USTBillSoldOut;
  SystemError : text;
  InvalidPrincipal;
  HTTPRequestError : text;
  HoldingAlreadySold;
  USTBillMatured;
  ValidationError : text;
  ExternalAPIError : text;
  VCInvalidCredentialType : text;
  InvalidTokenAmount;
  USTBillCancelled;
  InsufficientTokens;
  InvalidDate;
  Unauthorized;
  KYCExpired;
  KYCNotVerified;
  PlatformConfigurationError;
  InvalidCUSIP;
  VCSignatureNotFound : text;
  DidntFindUserData;
  InvalidHoldingData;
  USTBillAlreadyExists;
  InvalidTransactionType;
  InvalidUserData;
  VCGenericError : text;
  YieldDistributionError;
  TransactionNotFound;
  NotImplemented;
  USTBillNotFound;
  StorageError : text;
  VCUnauthorizedSubject : text;
  InvalidYieldRate;
  VCInternalError : text;
  InternalError : text;
  InvalidUSTBillData;
  PlatformFeesCalculationError;
  SerializationError : text;
  UserNotFound;
  AnonymousCaller;
  MaturityDatePassed;
  InsufficientFunds;
  HoldingMatured;
};
type CredentialSpec = record {
  arguments : opt vec record { text; ArgumentValue };
  credential_type : text;
};
type DerivationOriginData = record { origin : text };
type DerivationOriginRequest = record { frontend_hostname : text };
type FreeKYCSession = record {
  status : FreeKYCStatus;
  user_principal : principal;
  document_type : text;
  selfie_bytes : blob;
  reviewed_at : opt nat64;
  created_at : nat64;
  ofac_clear : bool;
  needs_manual_review : bool;
  upload_id : text;
  document_bytes : blob;
  calculated_age : nat8;
  ocr_result : OCRResult;
  reviewer_notes : opt text;
};
type FreeKYCStatus = variant {
  PendingReview;
  ManualApproved;
  Rejected;
  AutoApproved;
  Processing;
  Expired;
};
type GetCredentialRequest = record {
  signed_id_alias : SignedIdAlias;
  prepared_context : opt blob;
  credential_spec : CredentialSpec;
};
type HoldingStatus = variant { Sold; Active; Matured; Cancelled };
type HttpHeader = record { value : text; name : text };
type HttpResponse = record {
  status : nat;
  body : blob;
  headers : vec HttpHeader;
};
type Icrc21ConsentInfo = record { consent_message : text; language : text };
type Icrc21ConsentPreferences = record { language : text };
type Icrc21VcConsentMessageRequest = record {
  preferences : Icrc21ConsentPreferences;
  credential_spec : CredentialSpec;
};
type IssuedCredentialData = record { vc_jws : text };
type KYCCredential = record {
  verified_date : nat64;
  tier : nat8;
  credential_jws : text;
  issuer : text;
  expiry_date : nat64;
};
type KYCStatus = variant { Rejected; Verified; Expired; Pending };
type OCRResult = record {
  extracted_country : text;
  extracted_name : text;
  extracted_dob : text;
  raw_text : text;
  extracted_document_number : text;
  confidence_score : float32;
};
type PaginatedResponse = record {
  per_page : nat64;
  total : nat64;
  data : vec USTBill;
  page : nat64;
  has_next : bool;
};
type PlatformConfig = record {
  minimum_investment : nat64;
  kyc_expiry_days : nat64;
  platform_fee_percentage : float64;
  yield_distribution_frequency : nat64;
  maximum_investment : nat64;
  treasury_api_refresh_interval : nat64;
};
type PrepareCredentialRequest = record {
  signed_id_alias : SignedIdAlias;
  credential_spec : CredentialSpec;
};
type PreparedCredentialData = record { prepared_context : opt blob };
type Result = variant { Ok; Err : BitcoinUSTBillsError };
type Result_1 = variant { Ok : vec FreeKYCSession; Err : BitcoinUSTBillsError };
type Result_10 = variant { Ok : UserCredentials; Err : BitcoinUSTBillsError };
type Result_11 = variant { Ok : User; Err : BitcoinUSTBillsError };
type Result_12 = variant { Ok : PaginatedResponse; Err : BitcoinUSTBillsError };
type Result_13 = variant { Ok : YieldProjection; Err : BitcoinUSTBillsError };
type Result_14 = variant {
  Ok : PreparedCredentialData;
  Err : BitcoinUSTBillsError;
};
type Result_15 = variant { Ok : Icrc21ConsentInfo; Err : BitcoinUSTBillsError };
type Result_16 = variant {
  Ok : TradingEligibility;
  Err : BitcoinUSTBillsError;
};
type Result_2 = variant { Ok : TokenHolding; Err : BitcoinUSTBillsError };
type Result_3 = variant { Ok : nat64; Err : BitcoinUSTBillsError };
type Result_4 = variant { Ok : USTBill; Err : BitcoinUSTBillsError };
type Result_5 = variant {
  Ok : DerivationOriginData;
  Err : BitcoinUSTBillsError;
};
type Result_6 = variant { Ok : vec TreasuryRate; Err : BitcoinUSTBillsError };
type Result_7 = variant {
  Ok : IssuedCredentialData;
  Err : BitcoinUSTBillsError;
};
type Result_8 = variant { Ok : FreeKYCSession; Err : BitcoinUSTBillsError };
type Result_9 = variant { Ok : text; Err : BitcoinUSTBillsError };
type SignedIdAlias = record { credential_jws : text };
type TokenHolding = record {
  id : text;
  status : HoldingStatus;
  user_principal : principal;
  purchase_price : nat64;
  token_id : nat64;
  purchase_date : nat64;
  yield_option : YieldOption;
  current_value : nat64;
  projected_yield : nat64;
  ustbill_id : text;
};
type TradingEligibility = record {
  can_trade : bool;
  compliance_notes : vec text;
  max_investment_amount : nat64;
  requires_accreditation : bool;
  restricted_countries : vec text;
};
type TradingMetrics = record {
  average_price : nat64;
  last_updated : nat64;
  lowest_price : nat64;
  total_transactions : nat64;
  total_volume : nat64;
  highest_price : nat64;
};
type TransformArgs = record { context : blob; response : HttpResponse };
type TreasuryRate = record {
  record_date : text;
  rate : float64;
  cusip : text;
  security_desc : text;
  security_type : text;
  rate_date : text;
};
type USTBill = record {
  id : text;
  status : USTBillStatus;
  updated_at : nat64;
  purchase_price : nat64;
  owner : opt principal;
  face_value : nat64;
  cusip : text;
  created_at : nat64;
  annual_yield : float64;
  maturity_date : nat64;
  issuer : text;
  bill_type : text;
};
type USTBillCreateRequest = record {
  purchase_price : nat64;
  face_value : nat64;
  cusip : text;
  annual_yield : float64;
  maturity_date : nat64;
  issuer : text;
  bill_type : text;
};
type USTBillStatus = variant { Active; SoldOut; Matured; Cancelled };
type User = record {
  updated_at : nat64;
  "principal" : principal;
  country : text;
  kyc_tier : nat8;
  last_vc_verification : opt nat64;
  created_at : nat64;
  verified_adult : bool;
  email : text;
  total_invested : nat64;
  vc_credentials_ref : opt text;
  max_investment_limit : nat64;
  kyc_status : KYCStatus;
  verified_resident : bool;
  is_active : bool;
  phone_number : opt text;
  accredited_investor : bool;
  wallet_balance : nat64;
  total_yield_earned : nat64;
};
type UserCredentials = record {
  "principal" : principal;
  last_updated : nat64;
  verified_adult : opt VerifiedAdultCredential;
  verified_resident : opt VerifiedResidentCredential;
  kyc_credential : opt KYCCredential;
  accredited_investor : opt AccreditedInvestorCredential;
  credential_count : nat32;
};
type UserRegistrationRequest = record {
  country : text;
  email : text;
  phone_number : opt text;
};
type VerifiedAdultCredential = record {
  verified_date : nat64;
  min_age : nat8;
  credential_jws : text;
  issuer : text;
  expiry_date : nat64;
};
type VerifiedBrokerPurchase = record {
  ustbill_type : text;
  broker_txn_id : text;
  timestamp : nat64;
  price : nat64;
  amount : nat64;
};
type VerifiedResidentCredential = record {
  verified_date : nat64;
  credential_jws : text;
  issuer : text;
  expiry_date : nat64;
  country_code : text;
  country_name : text;
};
type YieldOption = variant { Maturity; Flexible };
type YieldProjection = record {
  days_to_maturity : nat64;
  holding_id : text;
  annual_yield_rate : float64;
  current_value : nat64;
  projected_yield : nat64;
  yield_percentage : float64;
};
service : {
  add_to_list : (principal) -> (Result);
  admin_add_broker_purchase_record : (nat64, nat64, text, text) -> (Result);
  admin_get_pending_reviews : () -> (Result_1) query;
  admin_review_free_kyc : (text, bool, text) -> (Result);
  buy_ustbill : (text) -> (Result_2);
  calculate_current_value : (text) -> (Result_3) query;
  calculate_maturity_yield : (text) -> (Result_3);
  calculate_purchase_cost : (text, nat64) -> (Result_3) query;
  create_ustbill : (USTBillCreateRequest) -> (Result_4);
  deposit_funds : (nat64) -> (Result_3);
  derivation_origin : (DerivationOriginRequest) -> (Result_5) query;
  fetch_treasury_rates : () -> (Result_6);
  get_active_ustbills : () -> (vec USTBill) query;
  get_all_verified_broker_purchases : () -> (vec VerifiedBrokerPurchase) query;
  get_credential : (GetCredentialRequest) -> (Result_7) query;
  get_free_kyc_status : (text) -> (Result_8) query;
  get_platform_config : () -> (PlatformConfig) query;
  get_principal_data : () -> (Result_9) query;
  get_storage_stats : () -> (vec record { text; nat64 }) query;
  get_trading_metrics : () -> (TradingMetrics) query;
  get_user_credential_status : (opt principal) -> (Result_10) query;
  get_user_holdings : (principal) -> (vec TokenHolding) query;
  get_user_profile : (principal) -> (Result_11) query;
  get_ustbill : (text) -> (Result_4) query;
  get_ustbill_availability : (text) -> (Result_3) query;
  get_ustbills_paginated : (nat64, nat64) -> (Result_12) query;
  get_yield_projection : (text) -> (Result_13) query;
  prepare_credential : (PrepareCredentialRequest) -> (Result_14);
  register_user : (UserRegistrationRequest) -> (Result_11);
  set_principal_data : (text) -> (Result);
  test_func : () -> (Result_9);
  transform_treasury_response : (TransformArgs) -> (HttpResponse) query;
  update_kyc_status : (principal, KYCStatus) -> (Result);
  update_platform_config : (PlatformConfig) -> (Result);
  update_ustbill_market_data : () -> (Result);
  upload_document_free_kyc : (blob, text, blob) -> (Result_9);
  vc_consent_message : (Icrc21VcConsentMessageRequest) -> (Result_15) query;
  verify_user_credentials : (opt principal) -> (Result_16);
  withdraw_funds : (nat64) -> (Result_3);
}
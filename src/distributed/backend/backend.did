type BitcoinUSTBillsError = variant {
  UserAlreadyExists;
  TradingNotAllowed;
  AccessDenied;
  InvalidAmount;
  TransactionCancelled;
  MinimumInvestmentNotMet;
  HoldingNotFound;
  DatabaseError : text;
  YieldCalculationError;
  FailedToAddToList;
  TreasuryDataFetchError;
  TransactionFailed;
  MaximumInvestmentExceeded;
  USTBillSoldOut;
  SystemError : text;
  InvalidPrincipal;
  FileStoreBucketError : text;
  HTTPRequestError : text;
  HoldingAlreadySold;
  USTBillMatured;
  ValidationError : text;
  ExternalAPIError : text;
  InvalidTokenAmount;
  USTBillCancelled;
  InsufficientTokens;
  InvalidDate;
  Unauthorized;
  KYCExpired;
  KYCNotVerified;
  PlatformConfigurationError;
  InvalidCUSIP;
  DidntFindUserData;
  InvalidHoldingData;
  USTBillAlreadyExists;
  InvalidTransactionType;
  InvalidUserData;
  YieldDistributionError;
  TransactionNotFound;
  NotImplemented;
  USTBillNotFound;
  StorageError : text;
  InvalidYieldRate;
  InternalError : text;
  InvalidUSTBillData;
  PlatformFeesCalculationError;
  SerializationError : text;
  UserNotFound;
  AnonymousCaller;
  MaturityDatePassed;
  InsufficientFunds;
  HoldingMatured;
};
type FreeKYCSession = record {
  status : FreeKYCStatus;
  document_front_page : text;
  user_principal : principal;
  reviewed_at : opt nat64;
  created_at : nat64;
  selfie_with_document : text;
  needs_manual_review : bool;
  document_back_page : text;
  reviewer_notes : opt text;
};
type FreeKYCStatus = variant {
  PendingReview;
  ManualApproved;
  Rejected;
  AutoApproved;
  Processing;
  Expired;
};
type HoldingStatus = variant { Active; Matured };
type HttpHeader = record { value : text; name : text };
type HttpResponse = record {
  status : nat;
  body : blob;
  headers : vec HttpHeader;
};
type KYCStatus = variant { Rejected; Verified; Expired; Pending };
type Result = variant {
  Ok : vec UserAndFreeKYCSession;
  Err : BitcoinUSTBillsError;
};
type Result_1 = variant { Ok; Err : BitcoinUSTBillsError };
type Result_2 = variant { Ok : FreeKYCSession; Err : BitcoinUSTBillsError };
type Result_3 = variant { Ok : User; Err : BitcoinUSTBillsError };
type Result_4 = variant { Ok : text; Err : BitcoinUSTBillsError };
type TokenHolding = record {
  id : text;
  status : HoldingStatus;
  user_principal : principal;
  purchase_price : nat64;
  token_id : nat64;
  purchase_date : nat64;
  current_value : nat64;
  projected_yield : nat64;
  ustbill_id : text;
};
type TradingMetrics = record {
  average_price : nat64;
  last_updated : nat64;
  lowest_price : nat64;
  total_transactions : nat64;
  total_volume : nat64;
  highest_price : nat64;
};
type TransformArgs = record { context : blob; response : HttpResponse };
type USTBill = record {
  id : text;
  status : USTBillStatus;
  updated_at : nat64;
  purchase_price : nat64;
  owner : opt principal;
  face_value : nat64;
  cusip : text;
  created_at : nat64;
  annual_yield : float64;
  maturity_date : nat64;
  issuer : text;
  bill_type : text;
};
type USTBillStatus = variant { Active; SoldOut; Matured; Cancelled };
type User = record {
  updated_at : nat64;
  "principal" : principal;
  country : text;
  kyc_tier : nat8;
  last_vc_verification : opt nat64;
  created_at : nat64;
  verified_adult : bool;
  email : text;
  total_invested : nat64;
  vc_credentials_ref : opt text;
  max_investment_limit : nat64;
  kyc_status : KYCStatus;
  verified_resident : bool;
  is_active : bool;
  phone_number : opt text;
  accredited_investor : bool;
  wallet_balance : nat64;
  total_yield_earned : nat64;
};
type UserAndFreeKYCSession = record {
  kyc_session : FreeKYCSession;
  user : User;
};
type UserRegistrationRequest = record {
  country : text;
  email : text;
  phone_number : opt text;
};
service : {
  admin_get_pending_reviews : () -> (Result) query;
  admin_review_free_kyc : (text, bool, opt text) -> (Result_1);
  get_active_ustbills : () -> (vec USTBill) query;
  get_authorized_principals : () -> (vec principal) query;
  get_free_kyc_status : (text) -> (Result_2) query;
  get_trading_metrics : () -> (TradingMetrics) query;
  get_user_holdings : (principal) -> (vec TokenHolding) query;
  get_user_profile : () -> (Result_3) query;
  is_user_registered : () -> (bool) query;
  register_user : (UserRegistrationRequest) -> (Result_3);
  transform_treasury_response : (TransformArgs) -> (HttpResponse) query;
  upload_document_free_kyc : (text, text, text) -> (Result_4);
}
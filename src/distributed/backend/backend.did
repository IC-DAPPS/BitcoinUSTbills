type BitcoinUSTBillsError = variant {
  UserAlreadyExists;
  AccessDenied;
  InvalidPrincipal;
  FileStoreBucketError : text;
  ValidationError : text;
  Unauthorized;
  KYCExpired;
  KYCNotVerified;
  InvalidUserData;
  StorageError : text;
  UserNotFound;
  AnonymousCaller;
};
type BlockTag = variant {
  Earliest;
  Safe;
  Finalized;
  Latest;
  Number : nat;
  Pending;
};
type FreeKYCSession = record {
  status : FreeKYCStatus;
  document_front_page : text;
  user_principal : principal;
  reviewed_at : opt nat64;
  created_at : nat64;
  selfie_with_document : text;
  needs_manual_review : bool;
  document_back_page : text;
  reviewer_notes : opt text;
};
type FreeKYCStatus = variant {
  PendingReview;
  ManualApproved;
  Rejected;
  AutoApproved;
  Processing;
  Expired;
};
type GetLogsArgs = record {
  fromBlock : opt BlockTag;
  toBlock : opt BlockTag;
  addresses : vec text;
  topics : opt vec vec text;
};
type KYCStatus = variant { Rejected; Verified; Expired; Pending };
type LogEntry = record {
  transactionHash : opt text;
  blockNumber : opt nat;
  data : text;
  blockHash : opt text;
  transactionIndex : opt nat;
  topics : vec text;
  address : text;
  logIndex : opt nat;
  removed : bool;
};
type Result = variant {
  Ok : vec UserAndFreeKYCSession;
  Err : BitcoinUSTBillsError;
};
type Result_1 = variant { Ok; Err : BitcoinUSTBillsError };
type Result_2 = variant { Ok : FreeKYCSession; Err : BitcoinUSTBillsError };
type Result_3 = variant { Ok : User; Err : BitcoinUSTBillsError };
type Result_4 = variant { Ok : text; Err : BitcoinUSTBillsError };
type User = record {
  updated_at : nat64;
  "principal" : principal;
  country : text;
  kyc_tier : nat8;
  last_vc_verification : opt nat64;
  created_at : nat64;
  verified_adult : bool;
  email : text;
  total_invested : nat64;
  vc_credentials_ref : opt text;
  max_investment_limit : nat64;
  kyc_status : KYCStatus;
  verified_resident : bool;
  is_active : bool;
  phone_number : opt text;
  accredited_investor : bool;
  wallet_balance : nat64;
  total_yield_earned : nat64;
};
type UserAndFreeKYCSession = record {
  kyc_session : FreeKYCSession;
  user : User;
};
type UserRegistrationRequest = record {
  country : text;
  email : text;
  phone_number : opt text;
};
service : {
  admin_get_pending_reviews : () -> (Result) query;
  admin_review_free_kyc : (text, bool, opt text) -> (Result_1);
  get_authorized_principals : () -> (vec principal) query;
  get_free_kyc_status : (text) -> (Result_2) query;
  get_latest_block_number : () -> (text);
  get_logs : (GetLogsArgs) -> (vec LogEntry);
  get_user_profile : () -> (Result_3) query;
  is_user_registered : () -> (bool) query;
  register_user : (UserRegistrationRequest) -> (Result_3);
  test_evm_rpc_connection : () -> (text);
  test_usdc_logs : () -> (vec LogEntry);
  upload_document_free_kyc : (text, text, text) -> (Result_4);
}
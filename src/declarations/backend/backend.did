type BitcoinUSTBillsError = variant {
  UserAlreadyExists;
  AccessDenied;
  InvalidPrincipal;
  FileStoreBucketError : text;
  ValidationError : text;
  Unauthorized;
  KYCExpired;
  KYCNotVerified;
  InvalidUserData;
  StorageError : text;
  UserNotFound;
  AnonymousCaller;
};
type FreeKYCSession = record {
  status : FreeKYCStatus;
  document_front_page : text;
  user_principal : principal;
  reviewed_at : opt nat64;
  created_at : nat64;
  selfie_with_document : text;
  needs_manual_review : bool;
  document_back_page : text;
  reviewer_notes : opt text;
};
type FreeKYCStatus = variant {
  PendingReview;
  ManualApproved;
  Rejected;
  AutoApproved;
  Processing;
  Expired;
};
type KYCStatus = variant { Rejected; Verified; Expired; Pending };
type PublicKeyReply = record { eth_address : text; public_key_hex : text };
type Result = variant {
  Ok : vec UserAndFreeKYCSession;
  Err : BitcoinUSTBillsError;
};
type Result_1 = variant { Ok; Err : BitcoinUSTBillsError };
type Result_2 = variant { Ok : PublicKeyReply; Err : text };
type Result_3 = variant { Ok : FreeKYCSession; Err : BitcoinUSTBillsError };
type Result_4 = variant { Ok : User; Err : BitcoinUSTBillsError };
type Result_5 = variant { Ok : text; Err : BitcoinUSTBillsError };
type TransferRequest = record {
  recipient : text;
  contract_address : text;
  amount : text;
};
type TransferResponse = record {
  transaction_hash : opt text;
  error_message : opt text;
  success : bool;
};
type User = record {
  updated_at : nat64;
  "principal" : principal;
  country : text;
  kyc_tier : nat8;
  last_vc_verification : opt nat64;
  created_at : nat64;
  verified_adult : bool;
  email : text;
  total_invested : nat64;
  vc_credentials_ref : opt text;
  max_investment_limit : nat64;
  kyc_status : KYCStatus;
  verified_resident : bool;
  is_active : bool;
  phone_number : opt text;
  accredited_investor : bool;
  wallet_balance : nat64;
  total_yield_earned : nat64;
};
type UserAndFreeKYCSession = record {
  kyc_session : FreeKYCSession;
  user : User;
};
type UserRegistrationRequest = record {
  country : text;
  email : text;
  phone_number : opt text;
};
service : {
  // Get pending manual reviews for admins
  admin_get_pending_reviews : () -> (Result) query;
  // Manual review functions for admins
  admin_review_free_kyc : (text, bool, opt text) -> (Result_1);
  // Gets the list of authorized principals
  get_authorized_principals : () -> (vec principal) query;
  get_eth_address : () -> (Result_2);
  // Check user's free KYC status
  get_free_kyc_status : (text) -> (Result_3) query;
  // Get latest block number
  get_latest_block_number : () -> (text);
  // Retrieves user profile
  get_user_profile : () -> (Result_4) query;
  // Checks if a user is registered
  is_user_registered : () -> (bool) query;
  // Registers a new user
  register_user : (UserRegistrationRequest) -> (Result_4);
  // Test ERC-20 transfer with hardcoded values
  test_erc20_transfer : () -> (TransferResponse);
  // Transfer ERC-20 tokens
  transfer_erc20_tokens : (TransferRequest) -> (TransferResponse);
  // Free Document Upload and OCR Processing
  upload_document_free_kyc : (text, text, text) -> (Result_5);
}
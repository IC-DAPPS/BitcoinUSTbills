name: Publish Motoko Docs to GitHub Pages

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  publish-docs:
    name: Build and publish Motoko docs
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup DFX
        uses: dfinity/setup-dfx@main
        with:
          dfx-version: 0.28.0

      - name: Download mo-doc
        run: |
          echo "Downloading mo-doc from Motoko releases..."
          echo "Checking available tools..."
          which curl || echo "curl not found"
          which wget || echo "wget not found"

          # Method 1: Try different URLs for Motoko releases
          echo "Attempting download with curl..."

          # Try multiple possible URLs
          DOWNLOAD_SUCCESS=false

          # URL 1: Try the correct Linux x86_64 tar.gz format
          echo "Trying URL 1: motoko-Linux-x86_64-0.16.1.tar.gz"
          if curl -L -o motoko-Linux-x86_64-0.16.1.tar.gz https://github.com/dfinity/motoko/releases/download/0.16.1/motoko-Linux-x86_64-0.16.1.tar.gz; then
            echo "Download successful with curl"
            echo "Checking downloaded file..."
            file motoko-Linux-x86_64-0.16.1.tar.gz
            echo "File size: $(ls -la motoko-Linux-x86_64-0.16.1.tar.gz)"
            echo "First few lines of file:"
            head -5 motoko-Linux-x86_64-0.16.1.tar.gz
            
            # Check if it's a valid tar.gz file
            if file motoko-Linux-x86_64-0.16.1.tar.gz | grep -q "gzip compressed"; then
              echo "Valid tar.gz file found, extracting..."
              tar -xzf motoko-Linux-x86_64-0.16.1.tar.gz
              echo "Extraction complete. Checking directory structure..."
              echo "Contents of extracted directory:"
              ls -la motoko-Linux-x86_64-0.16.1/ || echo "Directory not found, checking current directory:"
              ls -la
              echo "Looking for mo-doc in various locations..."
              find . -name "mo-doc" -type f 2>/dev/null || echo "mo-doc not found"
              echo "Looking for any executable files..."
              find . -name "*mo*" -type f 2>/dev/null || echo "No mo* files found"
              
              # Try to find mo-doc in the extracted structure
              MO_DOC_PATH=$(find . -name "mo-doc" -type f 2>/dev/null | head -1)
              if [ -n "$MO_DOC_PATH" ]; then
                echo "Found mo-doc at: $MO_DOC_PATH"
                chmod +x "$MO_DOC_PATH"
                echo "mo-doc made executable"
                DOWNLOAD_SUCCESS=true
              else
                echo "mo-doc not found in extracted files"
              fi
            else
              echo "Downloaded file is not a valid tar.gz, trying alternative URLs..."
            fi
          fi

          # URL 2: Try different naming convention
          if [ "$DOWNLOAD_SUCCESS" = false ]; then
            echo "Trying URL 2: motoko-linux64-0.16.1.tar.gz"
            if curl -L -o motoko-linux64-0.16.1.tar.gz https://github.com/dfinity/motoko/releases/download/0.16.1/motoko-linux64-0.16.1.tar.gz; then
              echo "Download successful with alternative URL"
              if file motoko-linux64-0.16.1.tar.gz | grep -q "gzip compressed"; then
                tar -xzf motoko-linux64-0.16.1.tar.gz
                chmod +x motoko-linux64-0.16.1/mo-doc
                echo "mo-doc extracted and made executable"
                DOWNLOAD_SUCCESS=true
              fi
            fi
          fi

          # URL 3: Try direct mo-doc binary download
          if [ "$DOWNLOAD_SUCCESS" = false ]; then
            echo "Trying URL 3: Direct mo-doc binary download"
            mkdir -p motoko-bin
            cd motoko-bin
            if curl -L -o mo-doc https://github.com/dfinity/motoko/releases/download/0.16.1/mo-doc; then
              chmod +x mo-doc
              echo "mo-doc downloaded directly"
              DOWNLOAD_SUCCESS=true
            fi
          fi

          if [ "$DOWNLOAD_SUCCESS" = false ]; then
            echo "All download methods failed"
            exit 1
          fi

      - name: Build documentation
        run: |
          echo "Building documentation with mo-doc..."
          echo "Current directory: $(pwd)"
          echo "Checking if source directory exists:"
          ls -la packages/file-store-bucket/src/ || echo "Source directory not found"
          echo "Running mo-doc..."

          # Try different mo-doc locations
          MO_DOC_PATH=""

          # Look for mo-doc in various locations
          if [ -f "./motoko-Linux-x86_64-0.16.1/mo-doc" ]; then
            MO_DOC_PATH="./motoko-Linux-x86_64-0.16.1/mo-doc"
            echo "Using mo-doc from tar.gz extraction"
          elif [ -f "./motoko-bin/mo-doc" ]; then
            MO_DOC_PATH="./motoko-bin/mo-doc"
            echo "Using mo-doc from direct download"
          else
            # Try to find mo-doc anywhere
            MO_DOC_PATH=$(find . -name "mo-doc" -type f 2>/dev/null | head -1)
            if [ -n "$MO_DOC_PATH" ]; then
              echo "Found mo-doc at: $MO_DOC_PATH"
            else
              echo "Error: mo-doc not found in any expected location"
              exit 1
            fi
          fi

          # Run mo-doc with the found path
          echo "Running mo-doc: $MO_DOC_PATH"
          "$MO_DOC_PATH" --source packages/file-store-bucket/src --output packages/file-store-bucket/docs

      - name: Setup Pages
        uses: actions/configure-pages@v4
        continue-on-error: true

      - name: Upload docs to Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./packages/file-store-bucket/docs
        continue-on-error: true

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        continue-on-error: true
